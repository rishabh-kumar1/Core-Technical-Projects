#!/bin/bash
#
# mapreduce run
#
# do mapreduce
#
set -Eeuo pipefail

# Sanity check command line options
usage() {
  echo "Usage: $0 (start|stop|restart|status)"
}
if [ $# -ne 1 ]; then
  usage
  exit 1
fi
# Parse argument.  $1 is the first argument
case $1 in
  "start")
    #DO CHECK FOR ACTIVITY FIRST
    if pgrep -f mapreduce-manager &> /dev/null; then
        echo "Error: mapreduce-manager is already running"
        exit 1
    fi

    mkdir -p var/log
    rm -f var/log/mapreduce-manager.log var/log/mapreduce-worker-6002.log var/log/mapreduce-worker-6001.log
    mapreduce-manager --host localhost --port 6000 --logfile var/log/mapreduce-manager.log &
    sleep 2  # give the Manager time to start
    mapreduce-worker --host localhost --port 6001 --manager-host localhost --manager-port 6000 --logfile var/log/mapreduce-worker-6001.log &
    mapreduce-worker --host localhost --port 6002 --manager-host localhost --manager-port 6000 --logfile var/log/mapreduce-worker-6002.log &
    echo "starting mapreduce ..."
    ;;
  "stop")
    # Detect GNU vs BSD netcat. We need netcat to close the connection after
    # sending a message, which requires different options.
    set +o pipefail  # Avoid erroneous failures due to grep returning non-zero
    if nc -h 2>&1 | grep -q "\-c"; then
        NC="nc -c"
    elif nc -h 2>&1 | grep -q "\-N"; then
        NC="nc -N"
    elif nc -h 2>&1 | grep -q "\-C"; then
        NC="nc -C"
    else
        echo "Error detecting netcat version."
        exit 1
    fi
    set -o pipefail
    echo '{"message_type": "shutdown"}' | $NC localhost 6000 || true
    sleep 2  # give the Manager time to receive signal and send to Workers
    echo "stopping mapreduce ..."
    if pgrep -f mapreduce-manager &> /dev/null; then
        echo "killing mapreduce manager ..."
        pkill -f mapreduce-manager || true
    fi
    if pgrep -f mapreduce-worker &> /dev/null; then
        echo "killing mapreduce worker ..."
        pkill -f mapreduce-worker || true
    fi
    ;;
  "restart")
    # Detect GNU vs BSD netcat. We need netcat to close the connection after
    # sending a message, which requires different options.
    set +o pipefail  # Avoid erroneous failures due to grep returning non-zero
    if nc -h 2>&1 | grep -q "\-c"; then
        NC="nc -c"
    elif nc -h 2>&1 | grep -q "\-N"; then
        NC="nc -N"
    elif nc -h 2>&1 | grep -q "\-C"; then
        NC="nc -C"
    else
        echo "Error detecting netcat version."
        exit 1
    fi
    set -o pipefail
    echo '{"message_type": "shutdown"}' | $NC localhost 6000 || true
    sleep 2  # give the Manager time to receive signal and send to Workers
    echo "stopping mapreduce ..."
    if pgrep -f mapreduce-manager &> /dev/null; then
        echo "killing mapreduce manager ..."
        pkill -f mapreduce-manager || true
    fi
    if pgrep -f mapreduce-worker &> /dev/null; then
        echo "killing mapreduce worker ..."
        pkill -f mapreduce-worker || true
    fi



    #DO CHECK FOR ACTIVITY FIRST
    if pgrep -f mapreduce-manager &> /dev/null; then
        echo "Error: mapreduce-manager is already running"
        exit 1
    fi

    mkdir -p var/log
    rm -f var/log/mapreduce-manager.log var/log/mapreduce-worker-6002.log var/log/mapreduce-worker-6001.log
    mapreduce-manager --host localhost --port 6000 --logfile var/log/mapreduce-manager.log &
    sleep 2  # give the Manager time to start
    mapreduce-worker --host localhost --port 6001 --manager-host localhost --manager-port 6000 --logfile var/log/mapreduce-worker-6001.log &
    mapreduce-worker --host localhost --port 6002 --manager-host localhost --manager-port 6000 --logfile var/log/mapreduce-worker-6002.log &    
    echo "starting mapreduce ..."
    ;;
  "status")
    if pgrep -f mapreduce-manager &> /dev/null; then
        echo "manager running"
        if pgrep -f mapreduce-worker &> /dev/null; then
            echo "workers running"
        else
            echo "workers not running"
            exit 1
        fi
    else
        echo "manager not running"
        if pgrep -f mapreduce-worker &> /dev/null; then
            echo "workers running"
            exit 1
        else
            echo "workers not running"
            exit 1
        fi
    fi
    exit 0
    ;;
  *)
    usage   
    exit 1
    ;;
esac
